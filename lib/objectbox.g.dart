// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/add_to_cart.dart';
import 'model/address.dart';
import 'model/category_model.dart';
import 'model/order_model.dart';
import 'model/product_model.dart';
import 'model/review_model.dart';
import 'model/transaction.dart';
import 'model/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 1565356276962140007),
      name: 'Product',
      lastPropertyId: const IdUid(10, 2905939110524699557),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2981584919834051675),
            name: 'productId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5192349552550127557),
            name: 'pid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 8781184623912490519)),
        ModelProperty(
            id: const IdUid(3, 4249532835161134922),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4087877784578082387),
            name: 'size',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2208096814301289943),
            name: 'color',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1784793162894669735),
            name: 'price',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3554116655890227820),
            name: 'items',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 148070388088772715),
            name: 'images',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2905939110524699557),
            name: 'brand',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 7875957296926146969),
      name: 'Category',
      lastPropertyId: const IdUid(4, 5459418828004907871),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8762291536659714655),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2337175425817290704),
            name: 'cId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 5353028849750466597)),
        ModelProperty(
            id: const IdUid(3, 7450114229800496807),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5459418828004907871),
            name: 'section',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 9076108477469319401),
      name: 'Review',
      lastPropertyId: const IdUid(6, 4405682803510405377),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7096274979113743253),
            name: 'reviewId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3010980369835516606),
            name: 'rid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 3817392602363831576)),
        ModelProperty(
            id: const IdUid(3, 4781755648228483468),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4874049714515531683),
            name: 'rating',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7623416531397749260),
            name: 'comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4405682803510405377),
            name: 'image',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 2330793707107090863),
      name: 'AddToCart',
      lastPropertyId: const IdUid(7, 4999294104132261609),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9148963461680532294),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5684115187301131733),
            name: 'cartId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 1001670569740267243)),
        ModelProperty(
            id: const IdUid(5, 803085118728117916),
            name: 'quantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1343173320818704054),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4999294104132261609),
            name: 'total',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5035195622656266238),
      name: 'Address',
      lastPropertyId: const IdUid(6, 1679733281721470777),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6738572077292649497),
            name: 'aid',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3299863609147490407),
            name: 'addressId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(6, 287700569641108475)),
        ModelProperty(
            id: const IdUid(3, 6745373384202688956),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3064813446283181647),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4106389657692064230),
            name: 'state',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1679733281721470777),
            name: 'country',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 3576036503923586630),
      name: 'User',
      lastPropertyId: const IdUid(10, 594822487464858899),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5883630138754925059),
            name: 'userId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6920212220314308688),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(7, 2530053588089915265)),
        ModelProperty(
            id: const IdUid(3, 5524208691788413404),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6012403253306563329),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4775460539193582217),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4957158119834026520),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3919357254686849890),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6029928701715300245),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1372704784383265220),
            name: 'profileURL',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 594822487464858899),
            name: 'role',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 7852562011838712340),
      name: 'UserOrder',
      lastPropertyId: const IdUid(6, 2581717006106229633),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5854358794404879059),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7678892565775833141),
            name: 'orderId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(10, 9163063251884808543)),
        ModelProperty(
            id: const IdUid(3, 6613679458382692732),
            name: 'quantity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 791768276597295498),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8751019465573603546),
            name: 'total',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2581717006106229633),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 3323878017280176108),
      name: 'UserTransaction',
      lastPropertyId: const IdUid(5, 8082219728183002174),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8702969804528417693),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1601316120106509814),
            name: 'transactionId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(11, 5923600039355627524)),
        ModelProperty(
            id: const IdUid(3, 6571246727773725902),
            name: 'quantity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1481457764507545601),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8082219728183002174),
            name: 'total',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(11, 3323878017280176108),
      lastIndexId: const IdUid(11, 5923600039355627524),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        1597712429975622224,
        1951720831340136635,
        1697259936548526635
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        60617498628700530,
        4567166038778083596,
        3146966960060447057,
        1320585690497305712,
        6199094139759011960,
        5395321282238281928,
        7258228086429670507,
        3246108554032712104,
        3004933703439580353,
        2285658037674061191,
        8920397164320504085,
        4885142704640812871,
        2563332347522407294,
        4075181300782457964,
        537319469942917470,
        4497484137266830627,
        8612637294643867774,
        2198153212830087089,
        7202993784628901953,
        3100144314857466546,
        5741174496159508479,
        8417346625484477988,
        3504966842513076071,
        7137915779292331096
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Product: EntityDefinition<Product>(
        model: _entities[0],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.productId,
        setId: (Product object, int id) {
          object.productId = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final pidOffset =
              object.pid == null ? null : fbb.writeString(object.pid!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final sizeOffset = object.size == null
              ? null
              : fbb.writeList(
                  object.size!.map(fbb.writeString).toList(growable: false));
          final colorOffset = object.color == null
              ? null
              : fbb.writeList(
                  object.color!.map(fbb.writeString).toList(growable: false));
          final priceOffset =
              object.price == null ? null : fbb.writeString(object.price!);
          final imagesOffset = object.images == null
              ? null
              : fbb.writeList(
                  object.images!.map(fbb.writeString).toList(growable: false));
          final brandOffset =
              object.brand == null ? null : fbb.writeString(object.brand!);
          fbb.startTable(11);
          fbb.addInt64(0, object.productId);
          fbb.addOffset(1, pidOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, sizeOffset);
          fbb.addOffset(4, colorOffset);
          fbb.addOffset(5, priceOffset);
          fbb.addInt64(6, object.items);
          fbb.addOffset(7, imagesOffset);
          fbb.addOffset(9, brandOffset);
          fbb.finish(fbb.endTable());
          return object.productId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Product(
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              size: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10),
              color: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 12),
              price: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              items: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16),
              brand: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              images: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGetNullable(buffer, rootOffset, 18),
              pid: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 6),
              productId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    Category: EntityDefinition<Category>(
        model: _entities[1],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final cIdOffset =
              object.cId == null ? null : fbb.writeString(object.cId!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final sectionOffset =
              object.section == null ? null : fbb.writeString(object.section!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, cIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, sectionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Category(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              cId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              section: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));

          return object;
        }),
    Review: EntityDefinition<Review>(
        model: _entities[2],
        toOneRelations: (Review object) => [],
        toManyRelations: (Review object) => {},
        getId: (Review object) => object.reviewId,
        setId: (Review object, int id) {
          object.reviewId = id;
        },
        objectToFB: (Review object, fb.Builder fbb) {
          final ridOffset =
              object.rid == null ? null : fbb.writeString(object.rid!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final commentOffset =
              object.comment == null ? null : fbb.writeString(object.comment!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          fbb.startTable(7);
          fbb.addInt64(0, object.reviewId);
          fbb.addOffset(1, ridOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.rating);
          fbb.addOffset(4, commentOffset);
          fbb.addOffset(5, imageOffset);
          fbb.finish(fbb.endTable());
          return object.reviewId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Review(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              rating: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              comment: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              rid: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              reviewId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0))
            ..image = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        }),
    AddToCart: EntityDefinition<AddToCart>(
        model: _entities[3],
        toOneRelations: (AddToCart object) => [],
        toManyRelations: (AddToCart object) => {},
        getId: (AddToCart object) => object.id,
        setId: (AddToCart object, int id) {
          object.id = id;
        },
        objectToFB: (AddToCart object, fb.Builder fbb) {
          final cartIdOffset =
              object.cartId == null ? null : fbb.writeString(object.cartId!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, cartIdOffset);
          fbb.addInt64(4, object.quantity);
          fbb.addOffset(5, statusOffset);
          fbb.addInt64(6, object.total);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AddToCart(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              cartId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              quantity: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              total: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16));

          return object;
        }),
    Address: EntityDefinition<Address>(
        model: _entities[4],
        toOneRelations: (Address object) => [],
        toManyRelations: (Address object) => {},
        getId: (Address object) => object.aid,
        setId: (Address object, int id) {
          object.aid = id;
        },
        objectToFB: (Address object, fb.Builder fbb) {
          final addressIdOffset = object.addressId == null
              ? null
              : fbb.writeString(object.addressId!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final stateOffset =
              object.state == null ? null : fbb.writeString(object.state!);
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          fbb.startTable(7);
          fbb.addInt64(0, object.aid);
          fbb.addOffset(1, addressIdOffset);
          fbb.addOffset(2, addressOffset);
          fbb.addOffset(3, cityOffset);
          fbb.addOffset(4, stateOffset);
          fbb.addOffset(5, countryOffset);
          fbb.finish(fbb.endTable());
          return object.aid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Address(
              aid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              addressId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              city: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              state: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              country: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));

          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[5],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.userId,
        setId: (User object, int id) {
          object.userId = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final phoneNumberOffset = object.phoneNumber == null
              ? null
              : fbb.writeString(object.phoneNumber!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final profileURLOffset = object.profileURL == null
              ? null
              : fbb.writeString(object.profileURL!);
          final roleOffset =
              object.role == null ? null : fbb.writeString(object.role!);
          fbb.startTable(11);
          fbb.addInt64(0, object.userId);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, lastNameOffset);
          fbb.addOffset(4, usernameOffset);
          fbb.addOffset(5, passwordOffset);
          fbb.addOffset(6, phoneNumberOffset);
          fbb.addOffset(7, emailOffset);
          fbb.addOffset(8, profileURLOffset);
          fbb.addOffset(9, roleOffset);
          fbb.finish(fbb.endTable());
          return object.userId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              phoneNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              uid: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              profileURL:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              role: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              userId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    UserOrder: EntityDefinition<UserOrder>(
        model: _entities[6],
        toOneRelations: (UserOrder object) => [],
        toManyRelations: (UserOrder object) => {},
        getId: (UserOrder object) => object.id,
        setId: (UserOrder object, int id) {
          object.id = id;
        },
        objectToFB: (UserOrder object, fb.Builder fbb) {
          final orderIdOffset =
              object.orderId == null ? null : fbb.writeString(object.orderId!);
          final quantityOffset = object.quantity == null
              ? null
              : fbb.writeString(object.quantity!);
          final colorOffset =
              object.color == null ? null : fbb.writeString(object.color!);
          final totalOffset =
              object.total == null ? null : fbb.writeString(object.total!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, orderIdOffset);
          fbb.addOffset(2, quantityOffset);
          fbb.addOffset(3, colorOffset);
          fbb.addOffset(4, totalOffset);
          fbb.addOffset(5, statusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserOrder(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              orderId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              quantity: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              color: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              total: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));

          return object;
        }),
    UserTransaction: EntityDefinition<UserTransaction>(
        model: _entities[7],
        toOneRelations: (UserTransaction object) => [],
        toManyRelations: (UserTransaction object) => {},
        getId: (UserTransaction object) => object.id,
        setId: (UserTransaction object, int id) {
          object.id = id;
        },
        objectToFB: (UserTransaction object, fb.Builder fbb) {
          final transactionIdOffset = object.transactionId == null
              ? null
              : fbb.writeString(object.transactionId!);
          final quantityOffset = object.quantity == null
              ? null
              : fbb.writeString(object.quantity!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          final totalOffset =
              object.total == null ? null : fbb.writeString(object.total!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, transactionIdOffset);
          fbb.addOffset(2, quantityOffset);
          fbb.addOffset(3, statusOffset);
          fbb.addOffset(4, totalOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserTransaction(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              transactionId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              quantity: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              total: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.productId]
  static final productId =
      QueryIntegerProperty<Product>(_entities[0].properties[0]);

  /// see [Product.pid]
  static final pid = QueryStringProperty<Product>(_entities[0].properties[1]);

  /// see [Product.title]
  static final title = QueryStringProperty<Product>(_entities[0].properties[2]);

  /// see [Product.size]
  static final size =
      QueryStringVectorProperty<Product>(_entities[0].properties[3]);

  /// see [Product.color]
  static final color =
      QueryStringVectorProperty<Product>(_entities[0].properties[4]);

  /// see [Product.price]
  static final price = QueryStringProperty<Product>(_entities[0].properties[5]);

  /// see [Product.items]
  static final items =
      QueryIntegerProperty<Product>(_entities[0].properties[6]);

  /// see [Product.images]
  static final images =
      QueryStringVectorProperty<Product>(_entities[0].properties[7]);

  /// see [Product.brand]
  static final brand = QueryStringProperty<Product>(_entities[0].properties[8]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.id]
  static final id = QueryIntegerProperty<Category>(_entities[1].properties[0]);

  /// see [Category.cId]
  static final cId = QueryStringProperty<Category>(_entities[1].properties[1]);

  /// see [Category.name]
  static final name = QueryStringProperty<Category>(_entities[1].properties[2]);

  /// see [Category.section]
  static final section =
      QueryStringProperty<Category>(_entities[1].properties[3]);
}

/// [Review] entity fields to define ObjectBox queries.
class Review_ {
  /// see [Review.reviewId]
  static final reviewId =
      QueryIntegerProperty<Review>(_entities[2].properties[0]);

  /// see [Review.rid]
  static final rid = QueryStringProperty<Review>(_entities[2].properties[1]);

  /// see [Review.name]
  static final name = QueryStringProperty<Review>(_entities[2].properties[2]);

  /// see [Review.rating]
  static final rating =
      QueryIntegerProperty<Review>(_entities[2].properties[3]);

  /// see [Review.comment]
  static final comment =
      QueryStringProperty<Review>(_entities[2].properties[4]);

  /// see [Review.image]
  static final image = QueryStringProperty<Review>(_entities[2].properties[5]);
}

/// [AddToCart] entity fields to define ObjectBox queries.
class AddToCart_ {
  /// see [AddToCart.id]
  static final id = QueryIntegerProperty<AddToCart>(_entities[3].properties[0]);

  /// see [AddToCart.cartId]
  static final cartId =
      QueryStringProperty<AddToCart>(_entities[3].properties[1]);

  /// see [AddToCart.quantity]
  static final quantity =
      QueryIntegerProperty<AddToCart>(_entities[3].properties[2]);

  /// see [AddToCart.status]
  static final status =
      QueryStringProperty<AddToCart>(_entities[3].properties[3]);

  /// see [AddToCart.total]
  static final total =
      QueryIntegerProperty<AddToCart>(_entities[3].properties[4]);
}

/// [Address] entity fields to define ObjectBox queries.
class Address_ {
  /// see [Address.aid]
  static final aid = QueryIntegerProperty<Address>(_entities[4].properties[0]);

  /// see [Address.addressId]
  static final addressId =
      QueryStringProperty<Address>(_entities[4].properties[1]);

  /// see [Address.address]
  static final address =
      QueryStringProperty<Address>(_entities[4].properties[2]);

  /// see [Address.city]
  static final city = QueryStringProperty<Address>(_entities[4].properties[3]);

  /// see [Address.state]
  static final state = QueryStringProperty<Address>(_entities[4].properties[4]);

  /// see [Address.country]
  static final country =
      QueryStringProperty<Address>(_entities[4].properties[5]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.userId]
  static final userId = QueryIntegerProperty<User>(_entities[5].properties[0]);

  /// see [User.uid]
  static final uid = QueryStringProperty<User>(_entities[5].properties[1]);

  /// see [User.firstName]
  static final firstName =
      QueryStringProperty<User>(_entities[5].properties[2]);

  /// see [User.lastName]
  static final lastName = QueryStringProperty<User>(_entities[5].properties[3]);

  /// see [User.username]
  static final username = QueryStringProperty<User>(_entities[5].properties[4]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[5].properties[5]);

  /// see [User.phoneNumber]
  static final phoneNumber =
      QueryStringProperty<User>(_entities[5].properties[6]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[5].properties[7]);

  /// see [User.profileURL]
  static final profileURL =
      QueryStringProperty<User>(_entities[5].properties[8]);

  /// see [User.role]
  static final role = QueryStringProperty<User>(_entities[5].properties[9]);
}

/// [UserOrder] entity fields to define ObjectBox queries.
class UserOrder_ {
  /// see [UserOrder.id]
  static final id = QueryIntegerProperty<UserOrder>(_entities[6].properties[0]);

  /// see [UserOrder.orderId]
  static final orderId =
      QueryStringProperty<UserOrder>(_entities[6].properties[1]);

  /// see [UserOrder.quantity]
  static final quantity =
      QueryStringProperty<UserOrder>(_entities[6].properties[2]);

  /// see [UserOrder.color]
  static final color =
      QueryStringProperty<UserOrder>(_entities[6].properties[3]);

  /// see [UserOrder.total]
  static final total =
      QueryStringProperty<UserOrder>(_entities[6].properties[4]);

  /// see [UserOrder.status]
  static final status =
      QueryStringProperty<UserOrder>(_entities[6].properties[5]);
}

/// [UserTransaction] entity fields to define ObjectBox queries.
class UserTransaction_ {
  /// see [UserTransaction.id]
  static final id =
      QueryIntegerProperty<UserTransaction>(_entities[7].properties[0]);

  /// see [UserTransaction.transactionId]
  static final transactionId =
      QueryStringProperty<UserTransaction>(_entities[7].properties[1]);

  /// see [UserTransaction.quantity]
  static final quantity =
      QueryStringProperty<UserTransaction>(_entities[7].properties[2]);

  /// see [UserTransaction.status]
  static final status =
      QueryStringProperty<UserTransaction>(_entities[7].properties[3]);

  /// see [UserTransaction.total]
  static final total =
      QueryStringProperty<UserTransaction>(_entities[7].properties[4]);
}
